import os
import argparse


def parse_arguments_preprocess(args=None):
    parser = argparse.ArgumentParser(
        prog="Copytyping preprocessing",
        description="preprocess data",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    ##################################################
    # general inputs for bulk data
    parser.add_argument(
        "--sample",
        required=True,
        type=str,
        help="sample name, used for output prefix",
    )
    parser.add_argument(
        "--modality",
        required=True,
        type=str,
        default="multiome",
        choices=["multiome", "GEX", "ATAC", "visium"],
        help="multiome, GEX, ATAC, visium",
    )
    ##################################################
    # HATCHet results&intermediate files
    parser.add_argument(
        "--seg_ucn",
        required=False,
        type=str,
        help="copy-number profile, seg.ucn.tsv generated by HATCHet",
    )
    parser.add_argument(
        "--tumor_1bed",
        required=False,
        type=str,
        help="tumor.1bed, HATCHet old version",
    )
    parser.add_argument(
        "--allele_dir",
        required=False,
        type=str,
        help="allele directory, HATCHet new version",
    )

    ##################################################
    # phasing files
    # all files must agree same reference version
    # currently vcf_file only consistent with bulk
    # pseudobulk use pre-computed phasing
    # think more about it later to merge both approach
    parser.add_argument(
        "--phase_mode",
        required=True,
        type=str,
        default="bulk",
        choices=["bulk", "pseudobulk"],
        help="bulk, pseudobulk",
    )
    parser.add_argument(
        "--vcf_file",
        required=False,
        type=str,
        help="phased.vcf.gz",
    )
    parser.add_argument(
        "--genetic_map",
        required=False,
        type=str,
        help="genetic map file, population-basd",
    )
    parser.add_argument(
        "--haplo_hairs",
        required=False,
        type=str,
        help="haplotype hairs file, long reads support",
    )

    ##################################################
    # general inputs for single-cell data
    parser.add_argument(
        "--barcodes",
        required=False,
        type=str,
        help="barcodes.txt file",
    )

    parser.add_argument(
        "--rna_h5ad",
        required=False,
        type=str,
        help="sample.scMultiome.h5ad",
    )

    parser.add_argument(
        "--atac_h5ad",
        required=False,
        type=str,
        help="sample.atac.h5ad",
    )

    parser.add_argument(
        "--ranger_dir",
        required=False,
        type=str,
        help="output directory by cell-ranger or space-ranger",
    )
    parser.add_argument(
        "--cellsnp_dir_1",
        required=False,
        type=str,
        help="output directory by cellSNP, scRNA-seq",
    )
    parser.add_argument(
        "--cellsnp_dir_2",
        required=False,
        type=str,
        help="output directory by cellSNP, scATAC-seq",
    )

    parser.add_argument(
        "--calicoST_prep_dir",
        required=False,
        type=str,
        help="output directory by CalicoST prep directory",
    )

    ##################################################
    # aux files
    # parser.add_argument(
    #     "--annotation_file", required=False, type=str, help="annotation bed file"
    # )
    parser.add_argument(
        "--genome_file",
        required=False,
        type=str,
        help="reference genome size file",
    )
    parser.add_argument(
        "--celltype_file", required=False, type=str, help="cell type file"
    )

    parser.add_argument(
        "-o",
        "--out_dir",
        required=True,
        type=str,
        help="output directory",
    )

    ##################################################
    # Parameters
    # parser.add_argument(
    #     "--min_gex_count",
    #     required=False,
    #     default=200,
    #     type=float,
    #     help="Adaptive binning over genes, min_gex_count",
    # )
    # parser.add_argument(
    #     "--min_atac_count",
    #     required=False,
    #     default=200,
    #     type=float,
    #     help="Adaptive binning over genes, min_atac_count",
    # )

    args = parser.parse_args()
    return vars(args)


def parse_arguments_copytyping(args=None):
    parser = argparse.ArgumentParser(
        prog="Copytyping MAIN",
        description="copytyping the preprocessed data",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    ##################################################
    # general inputs for bulk data
    parser.add_argument(
        "--sample",
        required=True,
        type=str,
        help="sample name, used for output prefix",
    )
    parser.add_argument(
        "--mode",
        required=True,
        type=str,
        default="multiome",
        choices=["multiome", "GEX", "ATAC", "visium"],
        help="multiome, GEX, ATAC, visium",
    )

    parser.add_argument(
        "--work_dir",
        required=False,
        type=str,
        help="working directory, <work_dir>/preprocess/",
    )

    parser.add_argument(
        "--out_prefix",
        required=True,
        type=str,
        help="relative output prefix",
    )

    ##################################################
    # Parameters
    parser.add_argument(
        "--laplace",
        required=False,
        default=0.01,
        type=float,
        help="Laplace smoothing term when computing clone BAF",
    )
    parser.add_argument(
        "--excl_baf_tol",
        required=False,
        default=2e-2,
        type=float,
        help="Exclude segment with BAF diff to estimated BBC BAF up to baf_tol",
    )
    parser.add_argument(
        "--excl_seg_len",
        required=False,
        default=1e6,
        type=float,
        help="Exclude segment with length less than seg_len",
    )
    parser.add_argument(
        "--map_thres",
        required=False,
        default=0.65,
        type=float,
        help="Assign cells/spots to NA if posterior less than <map_thres>",
    )


    args = parser.parse_args()
    return vars(args)
